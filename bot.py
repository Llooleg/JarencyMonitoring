import logging
import asyncio
import aiohttp
import json
import time
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, MessageHandler, CommandHandler, filters, ContextTypes
from colorama import Fore, Style, init
from config import SERVER_URL, BOT_TOKEN

init(autoreset=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class TelegramBotMonitor:
    def __init__(self):
        self.session = None
        self.message_count = 0
        self.error_count = 0
        self.server_responses = 0
        self.start_time = datetime.now()
        #self.summary_attempts = {}  # Track summary attempts per chat
        self.MAX_DAILY_ATTEMPTS = 5  # Max attempts per day per chat
        #self.summary_limiter = RateLimiter(max_calls=3, period=120)

    async def start_session(self):
        """–°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é""""""–°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é"""
        import ssl

        # Create SSL context that accepts self-signed certificates
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE

        # Use timeout configuration
        timeout = aiohttp.ClientTimeout(total=30)
        connector = aiohttp.TCPConnector(ssl=ssl_context)

        self.session = aiohttp.ClientSession(
            connector=connector,
            timeout=timeout
        )

        print(f"{Fore.GREEN}‚úÖ HTTP —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ (—Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        await self.check_server_health()

    async def close_session(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏—é"""
        if self.session:
            await self.session.close()
            print(f"{Fore.RED}‚ùå HTTP —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")

    async def check_server_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            async with self.session.get(f"{SERVER_URL}/health") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"{Fore.GREEN}üü¢ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {data}")
                    return True
                else:
                    print(f"{Fore.RED}üî¥ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                    return False
        except Exception as e:
            print(f"{Fore.RED}üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
            return False

    async def health_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        server_ok = await self.check_server_health()

        if server_ok:
            await update.message.reply_text("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\nü§ñ –ò–ò-–∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É")
    async def send_to_server(self, message_data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)"""
        try:
            print(f"{Fore.CYAN}üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")

            async with self.session.post(
                    f"{SERVER_URL}/save_message",
                    json=message_data,
                    timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    print(f"{Fore.GREEN}‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
                    return result
                else:
                    print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status}")
                    self.error_count += 1
                    return None
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {e}")
            self.error_count += 1
            return None

    async def get_gitlab_summary_from_server(self, dev):
        """Get GitLab facts from server"""
        try:
            print(f"{Fore.CYAN}ü§ñ Requesting GitLab facts for user: {dev}")

            async with self.session.get(
                    f"{SERVER_URL}/facts/{dev}?hours=24",
                    timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    print(f"{Fore.GREEN}‚úÖ Facts data received")
                    return result
                else:
                    print(f"{Fore.RED}‚ùå Server error: {response.status}")
                    return None
        except Exception as e:
            print(f"{Fore.RED}‚ùå Error retrieving facts: {e}")
            return None

    async def get_facts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /get_facts_for_user command"""
        if len(context.args) < 1:
            await update.message.reply_text("‚ùå Please specify a username. Usage: /get_facts_for_user username")
            return

        username = context.args[0]
        await update.message.reply_text(f"üîç Getting GitLab facts for {username}...")

        try:
            facts_data = await self.get_gitlab_summary_from_server(username)

            if facts_data and facts_data.get('status') == 'success':
                formatted_response = self.format_facts_response(facts_data['facts'])
                await update.message.reply_text(formatted_response)
            else:
                await update.message.reply_text("‚ùå Could not retrieve facts for this user")

        except Exception as e:
            print(f"{Fore.RED}‚ùå Error in get_facts_command: {e}")
            await update.message.reply_text("‚ùå Error retrieving facts")

    def format_facts_response(self, facts: dict) -> str:
        response = f"üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≥–∏—Ç–ª–∞–±–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ {facts['username']}\n"
        response += f"‚è∞ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {facts['period_hours']} —á–∞—Å–æ–≤\n\n"
        response += f"üìà –í—Å–µ —Å–æ–±—ã—Ç–∏—è: {facts['total_events']}\n\n"

        if facts['event_summary']:
            response += "üìã –î–µ—Ç–∞–ª–∏:\n"
            for event_type, count in facts['event_summary'].items():
                response += f"  ‚Ä¢ {event_type}: {count}\n"

        if facts.get('activities'):
            response += "\nüîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
            for activity in facts['activities'][:10]:  # Show last 10 activities
                response += f"  ‚Ä¢ {activity['description']} ({activity['timestamp']})\n"

        # Commit details
        if facts.get('commits'):
            response += f"\nüíæ Commits ({len(facts['commits'])}):\n"
            for commit in facts['commits'][:10]:  # Show up to 10 commits
                response += f"  ‚Ä¢ {commit['message']} ({commit['id']})\n"

        # Merge Request details
        if facts.get('merge_requests'):
            response += f"\nüîÄ Merge Requests ({len(facts['merge_requests'])}):\n"
            for mr in facts['merge_requests']:
                response += f"  ‚Ä¢ {mr['title']} ({mr['state']}) - {mr.get('url', 'No URL')}\n"

        # Issue details
        if facts.get('issues'):
            response += f"\nüêõ Issues ({len(facts['issues'])}):\n"
            for issue in facts['issues']:
                response += f"  ‚Ä¢ {issue['title']} ({issue['state']}) - {issue.get('url', 'No URL')}\n"

        # Repository information
        if facts['repositories']:
            response += f"\nüè∑ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: {', '.join(facts['repositories'][:5])}"
            if len(facts['repositories']) > 5:
                response += f" and {len(facts['repositories']) - 5} more..."

        if facts['last_activity']:
            response += f"\n\n‚è∞ Last Activity: {facts['last_activity']}"

        return response




    @staticmethod
    async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

        if update.message.chat.type == "private":
            await update.message.reply_text("üèì Pong! –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print(f"{Fore.CYAN}üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ ...")
        print(f"üì° –°–µ—Ä–≤–µ—Ä: {SERVER_URL}")
        print(f"üîë –¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...")
        print(f"{Fore.YELLOW}‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –û–¢–ö–õ–Æ–ß–ï–ù–´")


        application = Application.builder().token(BOT_TOKEN).build()

        # error handler FIRST
        #application.add_error_handler(self.error_handler)
        application.add_handler(CommandHandler("ping", self.ping_command ))


        application.add_handler(CommandHandler("health", self.health_command))

        application.add_handler(CommandHandler("get_actions", self.get_facts_command))
        #application.add_handler(CommandHandler("get_commits", self.get_detailed_commits_command))
        # Set up session
        application.job_queue.run_once(lambda _: asyncio.create_task(self.start_session()), 0)

        print(f"{Fore.GREEN}ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        print(f"{Fore.YELLOW}üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /summary, /prompt, /schedule, /stats, /health, /help")

        try:
            application.run_polling()
        except KeyboardInterrupt:
            print(f"{Fore.RED}‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        finally:
            asyncio.run(self.close_session())


if __name__ == "__main__":
    bot = TelegramBotMonitor()
    bot.run()